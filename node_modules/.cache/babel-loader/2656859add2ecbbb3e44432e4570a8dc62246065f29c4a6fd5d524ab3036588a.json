{"ast":null,"code":"const initialStateAccount = {\n  balance: 0,\n  loan: 0,\n  loanPurpose: \"\"\n};\nexport default function accountReducer(state = initialStateAccount, action) {\n  switch (action.type) {\n    case \"account/deposit\":\n      return {\n        ...state,\n        balance: state.balance + action.payload\n      };\n    case \"account/withdraw\":\n      return {\n        ...state,\n        balance: state.balance - action.payload\n      };\n    case \"account/requestLoan\":\n      if (state.loan > 0) return state;\n      return {\n        ...state,\n        loan: action.payload.amount,\n        balance: state.balance + action.payload.amount,\n        loanPurpose: action.payload.purpose\n      };\n    case \"account/payLoan\":\n      return {\n        ...state,\n        loan: 0,\n        loanPurpose: \"\",\n        balance: state.balance - state.loan\n      };\n    default:\n      return state;\n  }\n}\nexport const deposit = (amount, currency) => {\n  if (currency === \"USD\") return {\n    type: \"account/deposit\",\n    payload: amount\n  };\n  // this return is middleware(React- redux identify that this is middleware (thunk) used which is perform async function and than will return to reducer(or store))\n\n  return async function () {\n    //API call\n    const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`);\n    const data = await res.json();\n    console.log(data);\n    const covertedCurrency = data.rates.USD;\n    //dispatch action\n  };\n};\n\nexport const withdraw = amount => {\n  return {\n    type: \"account/withdraw\",\n    payload: amount\n  };\n};\nexport const requestLoan = (amount, purpose) => {\n  return {\n    type: \"account/requestLoan\",\n    payload: {\n      amount: amount,\n      purpose: purpose\n    }\n  };\n};\nexport const payLoan = () => {\n  return {\n    type: \"account/payLoan\"\n  };\n};","map":{"version":3,"names":["initialStateAccount","balance","loan","loanPurpose","accountReducer","state","action","type","payload","amount","purpose","deposit","currency","res","fetch","data","json","console","log","covertedCurrency","rates","USD","withdraw","requestLoan","payLoan"],"sources":["/Users/khushbu.vaghela/Documents/GitHub/K-15-redux-intro/src/features/accounts/accountSlice.js"],"sourcesContent":["const initialStateAccount = {\n  balance: 0,\n  loan: 0,\n  loanPurpose: \"\",\n};\n\nexport default function accountReducer(state = initialStateAccount, action) {\n  switch (action.type) {\n    case \"account/deposit\":\n      return { ...state, balance: state.balance + action.payload };\n    case \"account/withdraw\":\n      return { ...state, balance: state.balance - action.payload };\n    case \"account/requestLoan\":\n      if (state.loan > 0) return state;\n      return {\n        ...state,\n        loan: action.payload.amount,\n        balance: state.balance + action.payload.amount,\n        loanPurpose: action.payload.purpose,\n      };\n    case \"account/payLoan\":\n      return {\n        ...state,\n        loan: 0,\n        loanPurpose: \"\",\n        balance: state.balance - state.loan,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const deposit = (amount, currency) => {\n  if (currency === \"USD\") return { type: \"account/deposit\", payload: amount };\n  // this return is middleware(React- redux identify that this is middleware (thunk) used which is perform async function and than will return to reducer(or store))\n\n  return async function(){\n    //API call\n    const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${currency}&to=USD`)\n    const data = await res.json()\n    console.log(data)\n    const covertedCurrency = data.rates.USD\n    //dispatch action\n  }\n};\nexport const withdraw = (amount) => {\n  return { type: \"account/withdraw\", payload: amount };\n};\nexport const requestLoan = (amount, purpose) => {\n  return {\n    type: \"account/requestLoan\",\n    payload: { amount: amount, purpose: purpose },\n  };\n};\nexport const payLoan = () => {\n  return { type: \"account/payLoan\" };\n};\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,CAAC;EACVC,IAAI,EAAE,CAAC;EACPC,WAAW,EAAE;AACf,CAAC;AAED,eAAe,SAASC,cAAcA,CAACC,KAAK,GAAGL,mBAAmB,EAAEM,MAAM,EAAE;EAC1E,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO;QAAE,GAAGF,KAAK;QAAEJ,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAGK,MAAM,CAACE;MAAQ,CAAC;IAC9D,KAAK,kBAAkB;MACrB,OAAO;QAAE,GAAGH,KAAK;QAAEJ,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAGK,MAAM,CAACE;MAAQ,CAAC;IAC9D,KAAK,qBAAqB;MACxB,IAAIH,KAAK,CAACH,IAAI,GAAG,CAAC,EAAE,OAAOG,KAAK;MAChC,OAAO;QACL,GAAGA,KAAK;QACRH,IAAI,EAAEI,MAAM,CAACE,OAAO,CAACC,MAAM;QAC3BR,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAGK,MAAM,CAACE,OAAO,CAACC,MAAM;QAC9CN,WAAW,EAAEG,MAAM,CAACE,OAAO,CAACE;MAC9B,CAAC;IACH,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGL,KAAK;QACRH,IAAI,EAAE,CAAC;QACPC,WAAW,EAAE,EAAE;QACfF,OAAO,EAAEI,KAAK,CAACJ,OAAO,GAAGI,KAAK,CAACH;MACjC,CAAC;IACH;MACE,OAAOG,KAAK;EAChB;AACF;AAEA,OAAO,MAAMM,OAAO,GAAGA,CAACF,MAAM,EAAEG,QAAQ,KAAK;EAC3C,IAAIA,QAAQ,KAAK,KAAK,EAAE,OAAO;IAAEL,IAAI,EAAE,iBAAiB;IAAEC,OAAO,EAAEC;EAAO,CAAC;EAC3E;;EAEA,OAAO,kBAAgB;IACrB;IACA,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAAE,6CAA4CL,MAAO,SAAQG,QAAS,SAAQ,CAAC;IACtG,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB,MAAMI,gBAAgB,GAAGJ,IAAI,CAACK,KAAK,CAACC,GAAG;IACvC;EACF,CAAC;AACH,CAAC;;AACD,OAAO,MAAMC,QAAQ,GAAIb,MAAM,IAAK;EAClC,OAAO;IAAEF,IAAI,EAAE,kBAAkB;IAAEC,OAAO,EAAEC;EAAO,CAAC;AACtD,CAAC;AACD,OAAO,MAAMc,WAAW,GAAGA,CAACd,MAAM,EAAEC,OAAO,KAAK;EAC9C,OAAO;IACLH,IAAI,EAAE,qBAAqB;IAC3BC,OAAO,EAAE;MAAEC,MAAM,EAAEA,MAAM;MAAEC,OAAO,EAAEA;IAAQ;EAC9C,CAAC;AACH,CAAC;AACD,OAAO,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAC3B,OAAO;IAAEjB,IAAI,EAAE;EAAkB,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}